{"version":3,"sources":["store/reducers/weather.js","store/constants/weather.js","store/reducers/weather-city.js","store/constants/weather-city.js","store/reducers/index.js","store/store.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundary/index.js","components/error-boundary/error-boundary.js","utils/axios-settings.js","api/weather-api.js","components/weather-item/index.js","components/weather-item/weather-item.js","components/weather-list/index.js","components/weather-list/weather-list.js","components/weather-table-cell/weather-table-cell.js","components/weather-table-cell/index.js","utils/date-format.js","components/weather-table/weather-table.js","components/weather-table/index.js","components/modal-body/index.js","components/modal-body/modal-body.js","store/actions/weather-city.js","components/modal/modal.js","components/modal/index.js","containers/weather-container.js","store/actions/weather.js","app/app.js","app/index.js","root.js","index.js"],"names":["initialState","loading","weatherData","error","weatherReducer","state","action","type","payload","weatherCityData","weatherCityReducer","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ErrorIndicator","ErrorBoundary","hasError","this","setState","props","children","Component","axiosSettings","data","axios","create","baseURL","method","getWeatherData","a","API","get","getWeatherCityData","lat","lon","addr","WeatherItem","setIsOpen","setDataModal","coord","name","temp","main","ListItem","button","onClick","ListItemText","primary","Chip","color","label","WeatherList","list","List","component","aria-label","map","id","key","WeatherTableCell","daily","item","dt","wind_speed","pressure","humidity","TableRow","TableCell","scope","milliseconds","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","createDate","align","day","useStyles","makeStyles","table","minWidth","WeatherTable","classes","TableContainer","Paper","Table","className","TableHead","TableBody","ModalBody","connect","weatherCityLoading","weatherCityError","dispatch","getWeatherCityHandler","WeatherApi","useEffect","spinner","CircularProgress","errorMessage","content","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","TransitionsModal","isOpen","isClose","Modal","aria-labelledby","aria-describedby","open","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","weatherLoading","weatherError","getWeatherHandler","useState","cityWeatherData","setCityWeatherData","root","flexGrow","App","Container","maxWidth","Grid","container","xs","Root","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.7f3ff003.chunk.js","sourcesContent":["import { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from '../constants';\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  weatherData: [],\r\n  error: false,\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n\r\n  switch(action.type) {        \r\n\r\n    case FETCH_WEATHER_REQUEST:\r\n        return {\r\n            loading: true,\r\n            weatherData: [],\r\n            error: false,\r\n        };\r\n\r\n    case FETCH_WEATHER_SUCCESS:\r\n        return {\r\n            loading: false,\r\n            weatherData: action.payload,\r\n            error: false,\r\n        };\r\n\r\n    case FETCH_WEATHER_FAILURE:\r\n        return {\r\n            loading: false,\r\n            weatherData: [],\r\n            error: action.payload,\r\n        };\r\n\r\n    default: \r\n        return state;\r\n  }\r\n\r\n}\r\n\r\nexport default weatherReducer;","export const FETCH_WEATHER_REQUEST = 'FETCH_WEATHER_REQUEST';\r\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\r\nexport const FETCH_WEATHER_FAILURE = 'FETCH_WEATHER_FAILURE';","import { FETCH_WEATHER_CITY_REQUEST, FETCH_WEATHER_CITY_SUCCESS, FETCH_WEATHER_CITY_FAILURE } from '../constants';\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  weatherCityData: [],\r\n  error: false,\r\n};\r\n\r\nconst weatherCityReducer = (state = initialState, action) => {\r\n\r\n  switch(action.type) {        \r\n\r\n    case FETCH_WEATHER_CITY_REQUEST:\r\n        return {\r\n            loading: true,\r\n            weatherCityData: [],\r\n            error: false,\r\n        };\r\n\r\n    case FETCH_WEATHER_CITY_SUCCESS:\r\n        return {\r\n            loading: false,\r\n            weatherCityData: action.payload,\r\n            error: false,\r\n        };\r\n\r\n    case FETCH_WEATHER_CITY_FAILURE:\r\n        return {\r\n            loading: false,\r\n            weatherCityData: [],\r\n            error: action.payload,\r\n        };\r\n\r\n    default: \r\n        return state;\r\n  }\r\n\r\n}\r\n\r\nexport default weatherCityReducer;","export const FETCH_WEATHER_CITY_REQUEST = 'FETCH_WEATHER_CITY_REQUEST';\r\nexport const FETCH_WEATHER_CITY_SUCCESS = 'FETCH_WEATHER_CITY_SUCCESS';\r\nexport const FETCH_WEATHER_CITY_FAILURE = 'FETCH_WEATHER_CITY_FAILURE';","import { combineReducers } from 'redux';\r\n\r\nimport weatherReducer from './weather';\r\nimport weatherCityReducer from './weather-city';\r\n\r\nexport default combineReducers({\r\n  weatherReducer,\r\n  weatherCityReducer,\r\n});","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\r\n\r\nexport default store;","import ErrorIndicator from \"./error-indicator\";\r\n\r\nexport default ErrorIndicator;","import React from \"react\";\r\n\r\nconst ErrorIndicator = () => {\r\n  return (\r\n    <div>\r\n      <div>Что-то пошло не так</div>\r\n      <div>\r\n        Попробуйте обновить вкладку браузера или повторите попытку через\r\n        несколько минут\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorIndicator;\r\n","import ErrorBoundary from \"./error-boundary\";\r\n\r\nexport default ErrorBoundary;","import React, { Component } from \"react\";\r\n\r\nimport ErrorIndicator from \"../error-indicator\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorIndicator />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n// export default axios.create({\r\n//     baseURL: \"https://api.openweathermap.org/data/2.5\",\r\n//     method: 'get',\r\n// });\r\n\r\nconst axiosSettings = (data) => {\r\n    let url = data === 'city' ? \"https://api.openweathermap.org/data/2.5\" : \"https://api.openweathermap.org/data/2.5\";\r\n\r\n    return  axios.create({\r\n                baseURL: url,\r\n                method: 'get',\r\n            })\r\n}\r\n\r\nexport default axiosSettings;","import API from '../utils/axios-settings';\r\n\r\nclass WeatherApi {\r\n\r\n    getWeatherData = async () => { \r\n        const addr = `/group?id=524901,703448,2643743&lang=ru&units=metric&appid=b8dd12b10a5e9b631f1d9b511e5e36b3`;\r\n        return await API().get(addr);\r\n    };\r\n\r\n    getWeatherCityData = async ({ lat, lon }) => { \r\n        const addr = `/onecall?lat=${lat}&lon=${lon}&lang=ru&units=metric&appid=b8dd12b10a5e9b631f1d9b511e5e36b3`;\r\n        return await API('city').get(addr);\r\n    };\r\n\r\n}\r\n\r\nexport default new WeatherApi();","import WeatherItem from './weather-item';\r\n\r\nexport default WeatherItem;","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst WeatherItem = ({ weatherData, setIsOpen, setDataModal }) => {\r\n  const { coord, name, main: { temp  } } = weatherData;\r\n\r\n  return (\r\n    <ListItem button onClick={() => {\r\n      setIsOpen(true);\r\n      setDataModal({ name, coord })\r\n    }}>\r\n      <ListItemText primary={name} />\r\n        <Chip color=\"primary\" label={temp} />\r\n      </ListItem>\r\n  )\r\n      \r\n}\r\n\r\nexport default WeatherItem;","import WeatherList from './weather-list';\r\n\r\nexport default WeatherList;","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport WeatherItem from '../weather-item';\r\n\r\nconst WeatherList = ({ list, setIsOpen, setDataModal }) => {\r\n  return (\r\n    <List component=\"nav\" aria-label=\"city weather\">\r\n      {\r\n        list.map((data) => {\r\n            const { id } = data;\r\n\r\n            return <WeatherItem weatherData={data} setIsOpen={setIsOpen} setDataModal={setDataModal} key={id} />;\r\n        })\r\n      }\r\n  </List>\r\n  );        \r\n}\r\n\r\nexport default WeatherList;","import React from 'react';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport createDate from '../../utils/date-format';\r\n\r\nconst WeatherTableCell = ({ daily }) => {  \r\n  return  daily.map((item) => {\r\n            const { dt, temp, wind_speed, pressure, humidity } = item;\r\n\r\n            return (\r\n              <TableRow key={dt}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {createDate(dt)}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{temp.day}</TableCell>\r\n                <TableCell align=\"right\">{wind_speed}</TableCell>\r\n                <TableCell align=\"right\">{pressure}</TableCell>\r\n                <TableCell align=\"right\">{humidity}</TableCell>               \r\n              </TableRow>\r\n            )\r\n          });\r\n}\r\n\r\nexport default WeatherTableCell;","import WeatherTableCell from './weather-table-cell';\r\n\r\nexport default WeatherTableCell;","export default function createDate(milliseconds) {\r\n    const currentDate = new Date(milliseconds * 1000);\r\n    const date = currentDate.getDate();\r\n\r\n    const months = ['янв','фев','мар','апр','май','июн','июл','авг','сен','окт','ноя','дек'];\r\n    const month = months[currentDate.getMonth()];\r\n\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${date} ${month}. ${year}`;\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport WeatherTableCell from '../weather-table-cell';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: `100%`,\r\n  },\r\n});\r\n\r\nexport default function BasicTable(props) {\r\n  const classes = useStyles();\r\n  const { data } = props;\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Дата</TableCell>\r\n            <TableCell align=\"right\">Температура&nbsp;(ц)</TableCell>\r\n            <TableCell align=\"right\">Скорость ветра&nbsp;(мс)</TableCell>\r\n            <TableCell align=\"right\">Атм. давление&nbsp;(мм рт.)</TableCell>\r\n            <TableCell align=\"right\">Влажноть &nbsp;(%)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <WeatherTableCell daily={data.daily} />\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import WeatherTable from './weather-table';\r\n\r\nexport default WeatherTable;","import ModalBody from './modal-body';\r\n\r\nexport default ModalBody;","import React, { Component, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ErrorIndicator from '../error-indicator';\r\nimport WeatherTable from '../weather-table';\r\nimport { getWeatherCityData } from '../../store/actions';\r\n\r\nconst ModalBody = (props) => {\r\n\r\n    const { \r\n        getWeatherCityHandler, \r\n        weatherCityLoading, \r\n        weatherCityError, \r\n        weatherCityData, \r\n        data, \r\n    } = props;\r\n\r\n    useEffect(() => { \r\n        getWeatherCityHandler(data);\r\n    }, [data]);\r\n    \r\n    const spinner = weatherCityLoading ? <CircularProgress /> : null;\r\n    const errorMessage = weatherCityError ? <ErrorIndicator /> : null;\r\n\r\n    const hasData = !(weatherCityLoading || weatherCityError);\r\n    const content = hasData ? <WeatherTable data={weatherCityData}  /> : null;\r\n\r\n    return (\r\n        <>  \r\n            { spinner }\r\n            { errorMessage }\r\n            { content } \r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ weatherCityReducer }) => {\r\n    return {\r\n        weatherCityLoading: weatherCityReducer.loading,\r\n        weatherCityError: weatherCityReducer.error,\r\n        weatherCityData: weatherCityReducer.weatherCityData,        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getWeatherCityHandler: (data) => dispatch(getWeatherCityData(data)), \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalBody)\r\n","import { FETCH_WEATHER_CITY_REQUEST, FETCH_WEATHER_CITY_SUCCESS, FETCH_WEATHER_CITY_FAILURE } from '../constants';\r\n\r\nimport WeatherApi from '../../api/weather-api';\r\n\r\nexport const getWeatherCityData = (coord) => async dispatch =>{\r\n \r\n  dispatch({\r\n    type: FETCH_WEATHER_CITY_REQUEST,\r\n  });\r\n\r\n  try {\r\n  \r\n    const { data } = await WeatherApi.getWeatherCityData(coord);\r\n  \r\n    dispatch({\r\n      type: FETCH_WEATHER_CITY_SUCCESS,\r\n      payload: data,        \r\n    });\r\n\r\n  } catch(error) {\r\n\r\n    dispatch({\r\n      type: FETCH_WEATHER_CITY_FAILURE,\r\n      payload: error,\r\n    })\r\n\r\n  } \r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport ModalBody from '../modal-body';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function TransitionsModal(props) {\r\n\r\n    const classes = useStyles();\r\n    const { isOpen, isClose, data } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={isOpen}\r\n                onClose={isClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={isOpen}>\r\n                    <div className={classes.paper}>\r\n                        <h2 id=\"transition-modal-title\">Прогноз погоды в г. {data.name}</h2>\r\n                        <span id=\"transition-modal-description\">прогноз на неделю</span>\r\n                        <ModalBody data={data.coord} />\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","import TransitionsModal from './modal';\r\n\r\nexport default TransitionsModal;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport ErrorIndicator from '../components/error-indicator';\r\nimport { getWeatherData } from '../store/actions';\r\nimport WeatherList from '../components/weather-list';\r\nimport TransitionsModal from '../components/modal';\r\n// import Modal from '@material-ui/core/Modal';\r\nimport ModalBody from '../components/modal-body';\r\n\r\nconst WeatherContainer = (props) => {\r\n    \r\n    const { \r\n        getWeatherHandler, \r\n        weatherLoading, \r\n        weatherError, \r\n        weatherData,  \r\n    } = props;\r\n\r\n    const [ isOpen, setIsOpen ] = useState(false);\r\n    const [ cityWeatherData, setCityWeatherData ] = useState({ name: '', coord: { lat: '', lon: '' } });\r\n\r\n    const handleOpen = () => {\r\n        setIsOpen(true);\r\n      };\r\n    \r\n    const handleClose = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const { list } = weatherData;\r\n\r\n    useEffect(() => { \r\n        getWeatherHandler()\r\n    }, [])\r\n\r\n    const spinner = weatherLoading ? <CircularProgress /> : null;\r\n    const errorMessage = weatherError ? <ErrorIndicator /> : null;\r\n\r\n    const hasData = !(weatherLoading || weatherError);\r\n    const content = hasData ? <WeatherList list={list} setIsOpen={setIsOpen} setDataModal={setCityWeatherData} /> : null;\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <div className=\"\">\r\n                { spinner }\r\n                { errorMessage }\r\n                { content }  \r\n\r\n                <TransitionsModal isOpen={isOpen} isClose={handleClose} data={cityWeatherData} />\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nconst mapStateToProps = ({ weatherReducer }) => {\r\n    return {\r\n        weatherLoading: weatherReducer.loading,\r\n        weatherError: weatherReducer.error,\r\n        weatherData: weatherReducer.weatherData,        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getWeatherHandler: () => dispatch(getWeatherData()), \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer)\r\n","import { FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE } from '../constants';\r\n\r\nimport WeatherApi from '../../api/weather-api';\r\n\r\nexport const getWeatherData = () => async dispatch =>{\r\n\r\n  dispatch({\r\n    type: FETCH_WEATHER_REQUEST,\r\n  });\r\n\r\n  try {\r\n\r\n    const { data } = await WeatherApi.getWeatherData();\r\n\r\n    dispatch({\r\n      type: FETCH_WEATHER_SUCCESS,\r\n      payload: data,        \r\n    });\r\n\r\n  } catch(error) {\r\n\r\n    dispatch({\r\n      type: FETCH_WEATHER_FAILURE,\r\n      payload: error,\r\n    })\r\n\r\n  } \r\n\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport ErrorBoundary from '../components/error-boundary';\r\nimport WeatherContainer from '../containers/weather-container';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <Container maxWidth=\"sm\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <ErrorBoundary>\r\n              <WeatherContainer />  \r\n            </ErrorBoundary>  \r\n          </Grid>      \r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\n\r\nimport App from './app';\r\n\r\nconst Root = (props) => {\r\n    return (\r\n        <App />       \r\n    );\r\n}\r\n\r\nexport default Root;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from './store/store';\r\nimport Root from './root';\r\n\r\nimport \"./styles/root.css\";\r\n\r\nReactDOM.render(<Provider store={store}><Root /></Provider>, document.querySelector(\"#root\"));"],"sourceRoot":""}